<<입출력(Input/Output)>>

    기본입력 : 키보드
        System.in => 키보드
            => ex. new Scanner(System.in)
    기본출력 : 화면
        System.out => 화면

    * ~~Stream : 입력값을 처리할때 byte형태로 처리한다는 의미
        => byte 형태로 처리를 해야 문자, 이미지, 동영상 등 어떤 파일이든 가져올 수 있음
    * ctrl + c : 강제 종료
    * enter : 두가지 동작으로 이루어짐 => 캐리지리턴(13) + 라인피드(10)
    * append : 기존 파일 데이터에 새로 만드는게 아닌 추가한다는 개념
    * Charset : 인코딩 방식 지정 (utf-8 : 한글이 깨지므로 한글을 받아주는 방식)

    입력장치(키보드, 파일, 객체 등...)에서 읽어오기
        1) text 파일 : 문자스트림
        2) text + 모든 파일 : 바이트스트림
        - 스트림(Stream) : 서로 연결된 두 대상의 연결 통로 (ex. 키보드와 java / java와 화면)
            => 스트림은 양방향으로 사용 불가         
            => 입력, 출력을 따로 처리
        - InputStream : 추상클래스
            메서드
                read() : 한 문자(바이트)만 읽은 후 int로 돌려줌 => 영어, 숫자 가능 but. 한글 X
                int read(byte b[]) : 한바이트씩만 하면 시간이 오래 걸리기에 배열로 처리
                int read(byte[] b, int off, int len) : 읽어온 크기 안에서 처리하고 싶은 범위 지정
            => 너무 올드해서 새로 클래스로 나온게 Scanner
        - OutputStream : 추상클래스
            메서드
                write(int b)
                write(byte b[])
                write(byte b[], int off, int len)
        - Reader : 문자기반 읽어오기 / 추상클래스
            => 문자기반이라면 FileInputStream 보다 훨씬 편함
            메서드
                스트림 계열과 동일
        - Writer : 문자기반 출력하기 / 추상클래스
            메서드
                스트림 계열과 동일

    보조스트림
        - BufferedInputStream : 중간 작업
            순서 : 파일 => FileInputStream => BufferedInputStream => 자바
            메서드
                newLine() : 엔터
        - BufferedOutputStream : 중간 작업
            순서 : 파일 => FileOutputStream => BufferedOutputStream => 자바

    Scanner
        => InputStream 보다 편함
        => 형변환이 이미 되어 있음

        메서드
            1) next()
               nextInt() : 숫자로 가져옴
                => 줄단위로 가져오는게 아닌 숫자만 가져감 (엔터를 읽지 않음)
               nextLine() : String 으로 가져옴
                => 줄단위로 가져옴 (엔터를 읽음)


    File : java에서 파일(텍스트, 이미지, 동영상 등...)처리를 담당하는 객체
        File이 없다고 객체 생성이 안되는건 아님
        - 윈도우에서 사용하는 경로 구분자 => 세미콜론(;)
            유닉스(리눅스) => 콜론(:)
        - 윈도우에서 사용하는 이름 구분자 => \
            유닉스(리눅스) => /
            => 자바에서 \ 한개만 있으면 보통 \t나 \n을 기대함 => 따라서 \\ 두번을 사용해야 폴더 구분자로서 인식함
            => 즉, 슬래쉬는 1개, 역슬래쉬는 2개
            => 헷갈리기에 어떤 경로를 나타낼때 \ 대신 File.separator or File.separatorChar 사용

        File 메서드
            File.separator / File.separatorChar : 운영체제에 맞춰 구분자 생성
            1) File 정보 추출
                getName() : 파일명
                getPath() : 경로 포함 파일명
                getAbsolutePath() : 파일의 절대 경로
                getParent() : 부모 폴더
                length() : 파일 크기
                lastModified() : 최종수정일 => 00:00:00 GMT, January 1, 1970 날짜를 기준으로 흐른 시간만큼 long으로 반환
            2) Directory 정보 추출
                isDirectory() : true 일 때
            3) 디렉토리 / 파일 생성
                mkdir() : 디렉토리(폴더) 생성
                    => 만들고자 하는 디렉토리의 상위 디렉토리가 존재하지 않을 경우 생성 불가
                    mkdirs() => 만들고자 하는 디렉토리의 상위 디렉토리가 존재하지 않을 경우 상위 디렉토리까지 생성
                createNewFile() : 파일 생성
                