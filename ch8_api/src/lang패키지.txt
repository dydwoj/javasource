<<java.lang 패키지>>
    1. Object
        모든 클래스의 최고 조상

        1-1. equals() : 같은지 비교하는 용도 (주로 String)
            부모 : 주소값 비교
            자식 : 재정의 가능 => ex. 주소값 비교가 아닌 값 비교

        1-2. toString() : 멤버변수의 값을 출력하는 용도
            자식 : 재정의 가능
    
    2. String
        문자열을 다루기 위한 클래스
        변경 불가능한(immutable) 클래스
            다루는 방법
                1. String str1 = ""; => 재사용 개념(같은 주소를 가리킴)
                2. String str1 = new String(); => 새로운 인스턴스 매번 할당하는 개념(주소가 다름)
            1) length() : 문자열 길이
            2) equals("") : 문자열 비교 => Object클래스의 equals는 String에서 값비교로 오버라이딩 됨
               equalsIgnoreCase("") : 대소문자 구분없이 문자열 비교
            3) charAt(index) : 인덱스 해당하는 문자 출력
            4) toCharArray() : 문자열 => char 배열로 변환
                => 주의! : 배열이기에 값을 print에 그냥 던져도 나오나 "" 같은 꾸밈이 있으면 Arrays.toString() 사용!!
            5) indexOf("") : 문자열 포함 여부에 따라 index 반환 => 리턴타입 : (int) 존재 : index 번호(첫글자의 번호) or 존재X : -1
               indexOf("", index) : 찾는 단어 + 찾기 시작하는 위치 지정 => index가 찾는 단어보다 뒤면 -1 나옴
               lastIndexOf("") : 문자열의 끝(오른쪽)에서부터 찾기 => 중복 문자를 찾는다면 뒤에서부터 먼저 만나는 값의 index 표시
            6) contains("") : 문자열 포함 여부 => 리턴타입 : (boolean) T or F
            7) concat("") : 문자열을 뒤에 붙인다
            8) endsWith("") : 지정된 문자열로 종료 여부
               startsWith("") : 지정된 문자열로 시작 여부
            9) replace("원본", "변경") : 문자 or 문자열 교체 => 결과는 새로운 문자열로 반환
                => !!!!! 원본 변경 X !!!!! = immutable class!
                => 변경 => String 값에 다시 새로 선언해야 함
               replaceAll((regex) "원본", "변경") : 원본(정규식 사용 가능)을 찾아서 변경할 문자열로 전체 변경 => 일반 문자열, 정규식 다 가능(조금 더 넓은 범위)
               replaceFirst((regex)"원본", "변경") : 처음에 만나는 원본(정규식 사용 가능)을 찾아서 변경할 문자열로 변경
            10) substring(index) : 특정 위치의 문자열을 얻기 => 문자열에 유용
                substirng(index(begin), index(end)) : 특정 시작(begin)위치에서 종료(end : 여기의 index 는 포함 X)위치까지의 문자열을 얻기
            11) split("") : 지정한 분리자(원하는 문자열)로 나누어 배열로 반환 => 특정 기호, 문자, 공백 등에 유용
                split("", index) : 지정한 분리자(원하는 문자열)로 나누고 지정된 숫자만큼 분리
            12) toLowerCase() : 소문자 변경
                toUpperCase() : 대문자 변경
                    => Lower : 소문자 의미 // Upper : 대문자 의미
            13) trim() : 양쪽 끝에 있는 공백 제거(가운데는 제거 X) => 언어에서는 공백도 문자!
                => ex. "   HELLO".equals("HELLO") => false
            14) valueOf(i) - static 메서드 : 문자열로 반환
                => 같은 것 : i + "";