<<java.util 패키지>> : import 구문 필요

        token : 일정한 단위로 조각낸다는 의미
        List<E> or T, K V... : 객체타입이 필요하다는 의미
        ... : 몇개든 상관없다는 의미
        hash : 해싱 적용의 의미

    1. StringTokenizer
        문자열을 일정한 단위로 조각낸다

        구분자 0 (): 가 없다면 공백 기준으로 분리
        구분자 1 (, ""): (, " 기준 기입 ") 기준을 가지고 분리
        구분자 2 (, "", true or false) : 기준으로 분리 하는데 기준도 같이 돌려 받을 것인지
            구분자 = (,)

        장점
            구분자를 통한 문자열의 분리
        
        단점
            구분자로 사용할 수 있는 문자는 단 한문자만 가능
                => 두문자 이상이면 split() 이용

        StringTokenizer 메서드
            1) hasMoreTokens() : T or F (반복문에 사용하기 좋음)
            2) nextToken() : String 으로 출력

    2-1. Date
        현재 시스템의 날짜, 시간 등을 표현

        SimpleDateFormat 과 함께 다니는 짝꿍
            (api : https://docs.oracle.com/en/java/javase/23/docs/api/java.base/java/text/SimpleDateFormat.html)
            => 우리가 보기좋게 바꾸기 위해서
                yyyy : 년도 4자리 표현 | yy 년도 2자리 표현
                MM : 월 2자리 표현 | 1~9 월 01
                dd : 일 2자리 표현
                hh : 시
                mm : 분
                ss : 초
                a : 오전(am)/오후(pm)
            => Date만 쓰면 : Thu Mar 13 13:03:21 KST 2025 로 나옴

<컬렉션 프레임워크>
    java.util.collection (부모 클래스)
    데이터를 담는 다양한 방법에 대한 클래스(인터페이스)들의 모음

    대표적인 자녀 클래스
    1) List
    2) Set

        1) List
            List<E> or T, K V... => 객체타입이 필요함
            돌아가는 로직은 배열과 비슷함
            초기에 공간은 넉넉히 잡아야 좋음
            List = 배열
                순서대로 담기
                인덱스 접근 가능
            getter 존재
        

            장점
                배열의 단점(개발자의 불편함)을 해결
        
            구현 클래스
                ArrayList : 배열과 구조가 똑같음
                    => 연속된 공간
                    => default 공간 : 10 (공간을 처음부터 잡는 방법 존재)
                    => 공간의 잦은 삽입 삭제의 구조도 배열과 같음
                        ex. 공간 삭제 => 공간 재생성 => 복붙 자동
                    => 순차적으로 추가/삭제에서 LinkedList보다 빠르다 (단, ArrayList 저장 공간 확보가 선제조건)
                LinkedList : 리스트를 링크로 연결
                    => 주소가 있는 공간끼리 서로 연결
                    => 사용법 : ArrayList 와 동일
                        ex. A공간(17개) - B공간(20개) - C공간(40개)...
                    => 중간 데이터의 추가/삭제에서 ArrayList보다 빠르다
                Stack : 후입후출
                    => 입구와 출구가 동일
                    => 위치 지정 불가
                    => 먼저 들어간게 가장 밑에 깔리고 나오는건 가장 나중에 넣은게 나온다(Last In - First Out : LIFO)
                    => 수식계산, undo / redo, 브라우저 뒤로/앞으로 등에서 사용

                    Stack 메서드
                        1) push : 담기 (= add)
                        2) pop : 제거 (= remove) => 가장 마지막에 들어간게 나옴!
                Queue : 선입선출
                    => (First In - First Out : FIFO)
                    => 버퍼, 최근사용문서 등에서 사용
                    => 직접 new로 못받음(interface)

            List 메서드
                1) add() : 요소 추가
                2) remove(index) : 특정 위치 요소 제거
                   remove(Object) : 특정 요소 제거
                    => int 제거시 주의! => Integer.valueOf(숫자)로 감싸서 지워야 함
                3) size() : 배열에서는 length => list 에서는 size()로 크기를 알아냄
                4) contains : 문자열 포함 여부 => 리턴타입 : (boolean) T or F
                5) indexOf("") : 문자열 포함 여부에 따라 index 반환

            배열 -> List 변환 메서드
                1) List<객체타입> 리스트명 = Arrays.asList() : 배열 -> 리스트 변환시 수정작업 불가 => 조회는 가능
                2) List<객체타입> 리스트명 = new ArrayList<>(Arrays.asList(배열명)) : 배열 -> 리스트 변환(조회 + 변경)
            
            Set => List 변환 메서드 (SetEx2.java)
                List<객체타입> 리스트명 = new ArrayList(Set이름)

        2) Set : 중복된 요소를 저장하지 않음
                => 중복된 요소로 저장하지 않는 이유 : equals() 와 hashCode() 의 값이 true 면 중복 요소로 처리
                => Set은 equals와 hashCode 의 값 2가지로 중복을 가려냄
            => interface 구조
            순서를 유지하지 않음 (random)
                => LinkedHashSet : 입력된 순서유지 + 중복된 요소 저장 X
                => 순서가 없으므로 인덱스를 못줌 => getter 없음

            구현클래스
                HashSet : 해싱 적용
                    => 개발자가 만든 클래스로 Set 객체 호출시 중복요소 제거 X
                        => hashCode 오버라이딩
                TreeSet
                    => 중복 요소 허용 X + 정렬 => hashSet + 정렬
                    => 처음 입력값 => 입력값 보다 작은 수는 왼쪽 큰수는 오른쪽으로 정렬 (이진법)
                    => 범위 검색 가능 (subset 이용)
            
            Set 메서드 : 대부분 List와 동일
            TreeSet 메서드
                1) subSet(from, to) : from 부터 to 까지 출력 (to 값은 포함 X)

        3) Iterator
            컬렉션에 저장된 요소들을 읽어오는 방법에 대한 표준화
            List, Set 데이터를 읽어오는 방법과 Map 데이터를 읽어오는 방법이 서로 다름
                => Iterator를 통해 표준화
                => Map 에서 유용함

            Iterator 메서드
                1) hasNext() : 불린타입
                2) next() : 객체타입
                3) remove()

        4) Map : 부모가 collection이 아님!!! => 부모 : Object
            => 저장 방식이 collection(List, Set)과 다름
                => K(Key), V(Value) 구조 사용

            구현클래스
                HashMap : 해싱적용
                    => K값만 중복 요소 검증 (V값은 중복이어도 무관)
                TreeMap

            Map 메서드
                1) put() : 추가
                2) keySet() : key 값 가져오기
                    => key = set 구조
        
        5) Arrays
            배열과 관련된 유용한 메서드 제공
            모든 메서드가 static

            Arrays 메서드
                1) toString(args) : 배열 값 출력
                    => 오버라이딩 해놓음
                2) asList("") : 배열을 리스트로 변환
                3) 정렬 (sort => void 타입, 원본배열을 정렬)
                    sort(기본타입배열) : 오름차순 정렬
                    sort(객체타입배열, 정렬조건)
                        1. Comparator.naturalOrder() : 오름차순 정렬
                        2. Comparator.reverseOrder() : 내림차순 정렬
                4) 검색
                    1. 순차검색 : 배열 첫번째 요소부터 하나씩 검색하는 방법
                        => 검색해야할 양이 많으면 너무 헤비함
                        ex. for문
                    2. 이진검색 : 정렬된 데이터에서 범위를 반복적으로 줄여가면서 검색
                5) equals(배열1, 배열2) : 배열요소 값 비교

        6) Comparator & Comparable (interface)
            Comparator : 기본 정렬기준 외에 다른 기준으로 정렬하고자 할 때 사용
            Comparable : 기본 정렬 기준을 구현하는데 사용
                => 기본타입은 오버라이딩으로 재정의 했음
                => 새로운 기준으로 하고자 하면 오버라이딩으로 재정의





        

