<<java.util 패키지>> : import 구문 필요

        token : 일정한 단위로 조각낸다는 의미
        List<E> or T, K V... : 객체타입이 필요하다는 의미
        ... : 몇개든 상관없다는 의미

    1. StringTokenizer
        문자열을 일정한 단위로 조각낸다

        구분자 0 (): 가 없다면 공백 기준으로 분리
        구분자 1 (, ""): (, " 기준 기입 ") 기준을 가지고 분리
        구분자 2 (, "", true or false) : 기준으로 분리 하는데 기준도 같이 돌려 받을 것인지
            구분자 = (,)

        장점
            구분자를 통한 문자열의 분리
        
        단점
            구분자로 사용할 수 있는 문자는 단 한문자만 가능
                => 두문자 이상이면 split() 이용

        StringTokenizer 메서드
            1) hasMoreTokens() : T or F (반복문에 사용하기 좋음)
            2) nextToken() : String 으로 출력

    2-1. Date
        현재 시스템의 날짜, 시간 등을 표현

        SimpleDateFormat 과 함께 다니는 짝꿍
            (api : https://docs.oracle.com/en/java/javase/23/docs/api/java.base/java/text/SimpleDateFormat.html)
            => 우리가 보기좋게 바꾸기 위해서
                yyyy : 년도 4자리 표현 | yy 년도 2자리 표현
                MM : 월 2자리 표현 | 1~9 월 01
                dd : 일 2자리 표현
                hh : 시
                mm : 분
                ss : 초
                a : 오전(am)/오후(pm)
            => Date만 쓰면 : Thu Mar 13 13:03:21 KST 2025 로 나옴

    컬렉션 프레임워크
            java.util.collection
            데이터를 담는 다양한 방법에 대한 클래스(인터페이스)들의 모음
            1) List
            2) Set

    3. List
        List<E> or T, K V... => 객체타입이 필요함
        돌아가는 로직은 배열과 비슷함
        List = 배열
            순서대로 담기
            인덱스 접근 가능
        

        장점
            배열의 단점(개발자의 불편함)을 해결
        
        구현 클래스
            ArrayList : 배열과 구조가 똑같음
                => 연속된 공간
                => default 공간 : 10 (공간을 처음부터 잡는 방법 존재)
                => 공간의 잦은 삽입 삭제의 구조도 배열과 같음
                    ex. 공간 삭제 => 공간 재생성 => 복붙 자동
            LinkedList : 리스트를 링크로 연결
                => 주소가 있는 공간끼리 서로 연결
                => 사용법 : ArrayList 와 동일
                    ex. A공간(17개) - B공간(20개) - C공간(40개)...
            Stack
            Queue

        getter 존재

        List 메서드
            1) add() : 요소 추가
            2) remove(index) : 특정 위치 요소 제거
               remove(Object) : 특정 요소 제거
                => int 제거시 주의! => Integer.valueOf(숫자)로 감싸서 지워야 함
            3) size() : 배열에서는 length => list 에서는 size()로 크기를 알아냄
            4) contains : 문자열 포함 여부 => 리턴타입 : (boolean) T or F
            5) indexOf("") : 문자열 포함 여부에 따라 index 반환

        배열 -> List 변환 메서드
            1) List<String> 리스트명 = Arrays.asList() : 배열 -> 리스트 변환시 수정작업 불가 => 조회는 가능
            2) List<String> 리스트명 = new ArrayList<>(Arrays.asList(배열명)) : 배열 -> 리스트 변환(조회 + 변경)





        

