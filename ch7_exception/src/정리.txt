<<Exception(예외)>>
    발생시점
        1) 컴파일 에러 : 컴파일시에 발생하는 에러 => 빨간줄이 갈때의 에러
        2) 런타임 에러 : 런타임시에 발생하는 에러 => 실행해봐야 나오는 에러
            런타임 시의 에러 타입
            1. error : stack overflow(무한루프 같은), 메모리 부족
            2. exception : 수습가능


                     Object
                        |
                        |
                    Throwable
                        |
      |----------------------------------------|
    Exception                                Error
        |- IOException
        |- ClassNotFoundException
        |- RuntimeException
            ㄴ 런타임시 에러
            |- ArithmeticException
            |- NullPointerException


    Exception 처리
        1 - 1) try ~ catch 구문 작성
            ㄴ try 는 여러번 사용해도 됨

            try{
                예외가 발생할 가능성이 있는 문장 삽입
            } catch (Exception ex) {
                Exception 발생시 처리하기 위한 문장 삽입
            } catch (Exception ex) { => catch 문은 여러개 삽입 가능 (단, 순서는 있음)
                Exception 발생시 처리하기 위한 문장 삽입
            }
            => catch 문 작성시 multi 블럭 가능
            
            try{
                예외가 발생할 가능성이 있는 문장 삽입
            } catch (ArrayIndexOutOfBoundsException | ArithmeticException e) {
                Exception 발생시 처리하기 위한 문장 삽입
            }

        printStackTrace
            오류 발생시 어디서 발생했는지 알려주는 코드
            처음에는 내 코드의 어디서 발생했는지 먼저 확인
        
        1 - 2) try ~ catch ~ finally
            finally : 예외 발생여부와 관계없이 반드시 실행되어야 할 코드
                ㄴ 예외가 나던 안나던 무조건 실행 (멈추지 않고 finally 실행 후 멈춤)
                catch 없이 try ~ finally 로도 가능
            try-with-resources : 자동 리소스 닫기
                => 간단히 열어논 통로를 finally에서 닫아준다는 개념(ex. 리소스(입출력스트림, 소켓 등..)의 close() 호출 => sc.close())
                + finally 에서 주로 자원닫기 구문 실행 => 자바 버전 1.7부터 자동 닫기 지원 => finally로 개발자가 자원 닫기를 직접 명시하지 않아도 됨

                    try(자동으로 닫아야 하는 객체 생성){
                    } catch (Exception e){
                    }
        1 - 3) 강제 예외 발생 - Exception 사용
            throw new Exception(" ")

        2) 예외 전달(회피)
            throws Exception : 예외가 발생한 구간에서 처리가 아닌 호출한 구간에서 감당해줘