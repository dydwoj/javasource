<< Lambda >>
    => 람다식 : 익명구현객체를 식으로 표현(단순화) => 자손 X인 객체 (인터페이스, 추상클래스)

    참고클래스 : BigLetters // Lambda

    * annotation : 프로그램의 소스코드 안에 다른 프로그램을 위한 정보를 미리 약속된 형식으로 포함시키는 것
    * Bi : 2개
    * T : type / R : return type
    * 익명구현객체 : 이름이 없는 객체
        => 인터페이스, 추상클래스 => 구현객체를 무조건 생성한 후 사용
            => 한번만 사용한다면 익명 구현객체를 이용한다
    
    - 추상 클래스에서의 추상메서드 구현
        1) 구현클래스 작성 (오버라이딩)
        2) 익명구현객체
        3) 람다식 사용 : 추상메서드를 하나만 가지고 있어야 함
                @FunctionalInterface : 컴파일시 오류 검출 (두개인 경우 오류남)
                    => 추상메서드가 하나인지 검증

            - 작성
                (들어올 변수값) -> 출력내용 
                    => 만약 출력내용이 길어지면 {} 사용
                    * {} 없으면 알아서 한줄 리턴

    - 표준 API 의 함수적 인터페이스
        * 리턴값 없음(void) : 내가 알아서 리턴값 만들기
        1) Consumer<T> : 매개값은 있고, 리턴값은 없음 => 받아서 소비
            => void accept(T t)
           BiConsumer<T, U>
           DoubleConsumer : 매개값은 double(기본), 리턴값은 없음 
            => IntConsumer, LongConsumer
           ObjDoubleConsumer<String, double>
        2) Supplier : 매개값은 없고, 리턴값은 있음 => 받아서 반환(공급)
            => T get()
           IntSupplier => getAsInt()
        3) Function<T, R> : 매개값도 있고, 리턴값도 있음 => 주로 매개값을 리턴값으로 매핑
            => T 값이 들어와서 R 값으로 나감
           BiFunction<T, U, R> : T, U 받아서 R 반환
        4) Operator : 매개값도 있고, 리턴값도 있음 => 주로 매개값을 연산하고 결과를 리턴
        5) Predicate<T> : 매개값은 있고, 리턴값은 boolean => 매개값을 조사해서 t/f 리턴

    - 메서드 참조
        => 하나의 메서드만 호출하는 람다식
            1) 클래스이름 or 메서드이름
            2) 참조변수 or 메서드이름
                ex1. System.out::print
                ex2. String::toUpperCase

            => 하나의 메서드 호출은 그냥 임의의 변수를 그대로 뽑는 거기 때문에 가능한 것



    
    


        
