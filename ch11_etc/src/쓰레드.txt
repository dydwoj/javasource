<< Thread >>
    => 실제 프로그램이 수행되는 최소 작업 단위
    
    참고클래스 : Small/BigLetters, NumPrint // User, Calc // Account, AccUser

    * 프로세스 : 현재 실행중인 프로그램
    * 쓰레드 : 하나의 프로세스 안에 하나 이상의 Thread 사용
    * 스케줄러 : 
    * Cpu 코어에 따른 동작
        싱글 코어 => 쓰레드 우선순위에 따라 우선순위가 높은 쓰레드가 실행할 기회를 더 많이 받음
        쿼드 코어 => 한번에 4개의 쓰레드가 같이 실행

    - 멀티 쓰레드 : 하나의 작업을 병렬로 같이 수행
        => 실행대기 상태에 있는 쓰레드를 스케줄링에 의해 번갈아 가면서 실행

        작성 : 동시에 실행하고자 하는 클래스에 사용
        1) Thread 클래스(상속) 사용
            main 클래스에 다형성 개념 이용해서 객체 생성 => new 동시동작 클래스명;
        2) Runnable (인터페이스 클래스) 사용
            main 클래스에 쓰레드 객체 생성 => new Thread(new 동시동작 클래스명);
        
        메서드
            1) start() : 스케줄러에서 대기 (스케줄링에 의해서 실행 됨)
            2) sleep() : 잠시 멈춤 (멈춘다 하여도 다른 동작은 실행)
     
    - 쓰레드에 이름 주기
        => Thread 클래스에 setName 가 있어서 별도의 멤버변수 필요 X

    - 동기화와 블록
        => 멀티쓰레드 프로그램에서는 쓰레드들이 객체를 공유해서 작업하는 경우가 있음
        => 공유해서 사용하는 경우 한 스레드가 먼저 사용중이라면 다른 쓰레드의 접근을 막아야 함 => 임계영역
        => 같은 동작을 여러개의 쓰레드가 실행할 때 각 쓰레드들의 값들이 서로의 동작에 영향을 줌 => 원하는 값이 안 나올 수 있음
        => 하나의 쓰레드의 동작이 조건을 만나 sleep 에 빠지면 다른 쓰레드들이 sleep에 빠진 쓰레드가 다시 동작 할 때까지 기다리게 하는 것

        임계영역 (Syncronized)
            동기화 : 메서드에 Syncronized 추가
            블록 : 메서드의 {} 영역에 Syncronized () {} 추가 후 Syncronized {} 영역에 결과값 넣기
