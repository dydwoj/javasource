<< Stream >>
        IntStream, LongStream
    => 컬렉션(배열 포함)의 저장 요소를 하나씩 참조해서 람다식으로 처리할 수 있도록 도와주는 반복자
    => 내부반복자 사용
    => 중간처리(매핑, 필터링, 정렬)와 최종처리(반복, 카운팅, 합계, 평균) 가능
    => 한번 소비(최종처리)되면 재사용 불가(오류나옴) => 재생성 해야함 (재선언 후 사용)

    참고 : Stream, Student, Member

    * 컬렉션 : list, set, 배열 등
    * 최종처리만 안한다면 중간처리는 얼마든지 가능
    * 내부반복자 : 개발자가 직접 명시하지 않아도 알아서 결과값을 출력해주는 것
    * 외부반복자 : 개발자가 직접 명시하는 형태
        => ex. while 문안에 조건 넣어서 돌리는 등~

    - 메서드
        중간처리
            1) filter(Predicate<? super T> predicate) : 조건필터링
            2) distinct() : 중복제거
            3) map(Function<? super T, ? extends Object> mapper) : 스트림의 요소를 변환
                => map (Function<T, R> mapper) = 단순
               mapToInt(ToIntFunction<? super T> mapper) : map 의 R 타입이 int
                => (객체 :: 불러올 메서드) => 이건 = 객체.메서드 와 같음
               mapToLong() : map 의 R 타입이 long
               mapToDouble() : map 의 R 타입이 double
            
        최종처리
            1) forEach(Consumer<? super T> action) : 최종처리(반복)
                => 내부가 Consumer 와 같음 => () 안에 Consumer의 람다식을 쓰면 됨!
            2) collect(Collector<? super String, Object, Object> collector)
            3) sum() : 최종처리(합계)
            4) average() : 평균
            5) range() : 범위
            6) getAsDouble() : double로 반환

    - Stream 생성
        Stream.of(T... values) : 가변
        Stream.of(T t)